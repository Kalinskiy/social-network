{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","newMessageElement","React","createRef","className","s","message","ref","DialogItem","path","id","dialog","active","to","activeClassName","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageCreator","WithAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFC6BnKC,EApBC,SAACC,GAGb,IAAIC,EAAyBC,IAAMC,YAKnC,OACI,yBAAKC,UAAWC,IAAEC,SACd,0BAAOC,IAAKN,GAAoBD,EAAMM,W,QCGnCE,EAdI,SAACR,GAChB,IAAIS,EAAO,YAAcT,EAAMU,GAC/B,OACI,yBAAKN,UAAWC,IAAEM,OAAS,IAAMN,IAAEO,QAC/B,kBAAC,IAAD,CAASC,GAAIJ,EAAMK,gBAAiBT,IAAEO,QAASZ,EAAMe,Q,yCCR3DC,EAAcC,YAAiB,IAgBtBC,cAAU,CAACC,KAAM,wBAAjBD,EAfQ,SAAClB,GACpB,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXT,KAAM,iBACNU,YAAa,0BACbC,SAAU,CAACC,IAAUX,MAEjC,6BACI,6CCiCDY,EAtCQ,SAAC5B,GACpB,IAAI6B,EAAQ7B,EAAM8B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAY,kBAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAML,GAAIwB,EAAExB,QAChFyB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAY,kBAAC,EAAD,CAAS/B,QAAS+B,EAAE/B,aAGrDuB,EAAMS,eAO3B,OAAKtC,EAAMuC,OAMP,yBAAKnC,UAAWC,IAAE2B,SAEd,yBAAK5B,UAAWC,IAAEmC,cACbT,EADL,KAIA,yBAAK3B,UAAWC,IAAE+B,UAEd,6BAAMD,EAAN,KAEA,kBAAC,EAAD,CAAiBf,SApBT,SAACqB,GACjBzC,EAAM0C,YAAYD,EAAOH,mBAerB,cAXG,kBAAC,IAAD,CAAUzB,GAAI,Y,wBCOd8B,sBACXC,aAlBkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACe,GACtB,MAAO,CACHH,YAAa,SAACJ,GACVO,EAASC,YAAmBR,SAUpCS,IAFWJ,CAGbf","file":"static/js/5.35e9a9de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IJnMi\",\"dialogsItems\":\"Dialogs_dialogsItems__3gr8b\",\"active\":\"Dialogs_active__2UsjR\",\"messages\":\"Dialogs_messages__1MvcE\",\"message\":\"Dialogs_message__VOYbf\"};","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\n\r\n\r\nexport type MessageType = {\r\n    id?: number\r\n    message: string\r\n\r\n\r\n}\r\nconst Message = (props: MessageType) => {\r\n\r\n\r\n    let newMessageElement: any = React.createRef()\r\n    let sendMessage = () => {\r\n        let text = newMessageElement.current.value;\r\n        alert(text);\r\n    }\r\n    return (\r\n        <div className={s.message}>\r\n            <span  ref={newMessageElement}>{props.message}</span>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from '../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../../utilities/validators/validators\";\r\nimport {TextArea} from \"../../../common/FormsControls/FormControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field component={TextArea}\r\n                        name={'newMessageBody'}\r\n                        placeholder={'Enter your message here'}\r\n                        validate={[required, maxLength50]}\r\n            /></div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport AddMessageForm from \"./Message/AddMessageForm/AddMessageForm\";\r\n\r\n\r\nexport const Dialogs = (props: any) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((d: any) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map((m: any) => <Message message={m.message}\r\n    />);\r\n\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    let addNewMessage = (values:any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n\r\n    };\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements} {/*рефакторинг через метод массива map*/}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div>{messagesElements} </div>\r\n                {/*рефакторинг через метод массива map*/}\r\n                <AddMessageForm  onSubmit={addNewMessage}/>         {/*форма отправки сообщения через redux-form*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React, {Dispatch} from \"react\";\r\nimport {\r\n    sendMessageCreator,\r\n    sendMessageCreatorType,\r\n    updateNewMessageBodyCreatorType\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStoreType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype mapDispatchToPropsType = sendMessageCreatorType | updateNewMessageBodyCreatorType\r\n\r\nlet mapStateToProps = (state: AppStoreType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<mapDispatchToPropsType>) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        },\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n"],"sourceRoot":""}